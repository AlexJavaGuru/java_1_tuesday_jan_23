package student_natalja_semitseva.Lesson_9_Task_6_9;

public class OptionalDemo {
}
//Optional в первую очередь предназначен для использования в качестве возвращаемого типа метода,
// ...где существует явная необходимость представлять «нет результата»,
// ...и там, где использование может привести к ошибкам.
// ...Переменная, тип которой должен никогда не быть самим собой; он всегда должен указывать на экземпляр.nullOptionalnullOptional
//.. это контейнер, хранящий в себе значение.Класс параметризуется и позволяет хранить любые ссылочные типы.

//Какие два состояния могут быть у объектов этого класса?
//Если значения нет - контейнер будет пустой, если есть - оно будет внутри контейнера.

//Как создаются экземпляры данного класса?
//Создание Optional происходит через фабричные методы.
////... 1.Optional.of.
//Используется тогда, когда вы помещаете в Optional значение, которое совершенно точно не является null.
// При этом, если передать null будет выброшено NPE исключение.
////...2.Optional.ofNullable()
// Используется тогда, когда вы не гарантируете то, что помещаемое значение не является null.
////...3.Optional.empty()
//Используется тогда, когда вам надо вернуть пустой контейнер.

//Как можно проверить в каком состоянии находится экземпляр данного класса?
////isPresent
//Существует метод, явно проверяющий существует обёрнутый объект или нет: isPresent().
//Метод isPresent - это по сути обычная проверка, как если бы мы писали if (value != null ):
////ifPresent
//  можно передать функцию, которая будет выполнена над объектом внутри контейнера, при условии, что он там есть
////ifPresentOrElse
//Зачастую бывает необходимо выполнить какую-то логику, при отсутствии значения, а не просто проигнорировать эту ситуацию,
// в таком случае пригодится ifPresentOrElse.
////orElse
//Метод простой и делает ровно то, о чем мы говорили выше: или возвращает значение в контейнере,
// или значение по-умолчанию, которое вы указали.
////orElseGet
//Метод очень похож на предыдущий, только вместо конкретного значения по-умолчанию, при отсутствии значения в контейнере,
// он выполнит функцию (Supplier).
////orElseThrow
//Метод orElseThrow либо вернет значение в контейнере, либо выкинет исключение (которое вы сгенерируете внутри Supplier)

//Как можно получить объект, который находится внутри Optional?
//Существует три прямых метода дальнейшего получения объекта семейства orElse(); Как следует из перевода,
// эти методы срабатывают в том случае, если объекта в полученном Optional не нашлось.
//orElse() — возвращает объект по дефолту.
//orElseGet() — вызывает указанный метод.
//orElseThrow() — выбрасывает исключение.